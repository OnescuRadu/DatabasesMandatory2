datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             Int             @id @default(autoincrement())
    email          String          @unique
    password       String
    role           UserRole        @default(User)
    verified       Boolean         @default(false)
    deleted        Boolean         @default(false)
    personalData   PersonalData?   @relation(fields: [personalDataId], references: [id])
    personalDataId Int?
    sellers        Seller[]
    orders         Order[]
    productRatings ProductRating[]
    sellerRatings  SellerRating[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}

enum UserRole {
    User
    Manager
    Admin
}

model PersonalData {
    id          Int      @id @default(autoincrement())
    user        User?    @relation
    firstName   String
    lastName    String
    phoneNumber String?
    dateOfBirth DateTime
    address     Address? @relation(fields: [addressId], references: [id])
    addressId   Int?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Address {
    id        Int            @id @default(autoincrement())
    text      String
    street    String
    number    String
    floor     String?
    door      String?
    zipCode   String
    city      String
    users     PersonalData[]
    sellers   Seller[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

model Seller {
    id          Int                @id @default(autoincrement())
    name        String
    legalName   String
    cvr         String
    phoneNumber String
    address     Address            @relation(fields: [addressId], references: [id])
    addressId   Int
    owner       User               @relation(fields: [ownerId], references: [id])
    ownerId     Int
    orders      Order[]
    ratings     SellerRating[]
    products    SellerToProducts[]
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

model SellerToProducts {
    id            Int         @id @default(autoincrement())
    seller        Seller      @relation(fields: [sellerId], references: [id])
    sellerId      Int
    product       Product     @relation(fields: [productId], references: [id])
    productId     Int
    originalPrice Int
    salePrice     Int?
    stockQty      Int
    deleted       Boolean
    orderItems    OrderItem[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Order {
    id        Int         @id @default(autoincrement())
    user      User        @relation(fields: [userId], references: [id])
    userId    Int
    seller    Seller      @relation(fields: [sellerId], references: [id])
    sellerId  Int
    status    OrderStatus
    items     OrderItem[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model OrderItem {
    id              Int              @id @default(autoincrement())
    order           Order            @relation(fields: [orderId], references: [id])
    orderId         Int
    sellerProduct   SellerToProducts @relation(fields: [sellerProductId], references: [id])
    sellerProductId Int
    quantity        Int
    pricePaid       Int
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

enum OrderStatus {
    Pending
    Confirmed
    Sent
    Delivered
    Cancelled
}

model Manufacturer {
    id        Int       @id @default(autoincrement())
    name      String
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model ProductDescription {
    id          Int       @id @default(autoincrement())
    description String
    products    Product[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Property {
    id        Int                    @id @default(autoincrement())
    name      String
    type      PropertyType
    products  ProductsToProperties[]
    createdAt DateTime               @default(now())
    updatedAt DateTime               @updatedAt
}

enum PropertyType {
    Boolean
    Number
    String
}

model Category {
    id            Int        @id @default(autoincrement())
    parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
    parentId      Int?
    subCategories Category[] @relation("Subcategories")
    name          String
    deleted       Boolean
    products      Product[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

model Product {
    id             Int                    @id @default(autoincrement())
    name           String
    code           String
    manufacturer   Manufacturer           @relation(fields: [manufacturerId], references: [id])
    manufacturerId Int
    description    ProductDescription?    @relation(fields: [descriptionId], references: [id])
    descriptionId  Int?
    properties     ProductsToProperties[]
    category       Category               @relation(fields: [categoryId], references: [id])
    categoryId     Int
    approved       Boolean
    deleted        Boolean
    groups         ProductGroup[]
    images         ProductImage[]
    ratings        ProductRating[]
    sellers        SellerToProducts[]
    priceHistory   PriceHistory[]
    createdAt      DateTime               @default(now())
    updatedAt      DateTime               @updatedAt
}

model ProductsToProperties {
    id         Int      @id @default(autoincrement())
    product    Product  @relation(fields: [productId], references: [id])
    productId  Int
    property   Property @relation(fields: [propertyId], references: [id])
    propertyId Int
    value      String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model ProductGroup {
    id        Int       @id @default(autoincrement())
    name      String?
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model ProductImage {
    id        Int      @id @default(autoincrement())
    product   Product  @relation(fields: [productId], references: [id])
    productId Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductRating {
    id        Int      @id @default(autoincrement())
    product   Product  @relation(fields: [productId], references: [id])
    productId Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    rating    Int
    review    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SellerRating {
    id        Int      @id @default(autoincrement())
    seller    Seller   @relation(fields: [sellerId], references: [id])
    sellerId  Int
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    rating    Int
    review    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PriceHistory {
    id           Int      @id @default(autoincrement())
    product      Product  @relation(fields: [productId], references: [id])
    productId    Int
    oldPrice     Int
    newPrice     Int
    oldSalePrice Int
    newSalePrice Int
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}
