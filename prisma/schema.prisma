datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["mongodb"]
}

model User {
    id             String          @id @default(dbgenerated()) @map("_id") @db.ObjectId
    email          String          @unique
    password       String
    role           String          @default("User")
    verified       Boolean         @default(false)
    deleted        Boolean         @default(false)
    personalData   PersonalData?   @relation(fields: [personalDataId], references: [id])
    personalDataId String?         @db.ObjectId
    sellers        Seller[]
    orders         Order[]
    productRatings ProductRating[]
    sellerRatings  SellerRating[]
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
}

// enum UserRole {
//     User
//     Manager
//     Admin
// }

model PersonalData {
    id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
    user        User?    @relation
    firstName   String
    lastName    String
    phoneNumber String?
    dateOfBirth DateTime
    address     Address? @relation(fields: [addressId], references: [id])
    addressId   String?  @db.ObjectId
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Address {
    id        String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
    text      String
    street    String
    number    String
    floor     String?
    door      String?
    zipCode   String
    city      String
    users     PersonalData[]
    sellers   Seller[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

model Seller {
    id          String             @id @default(dbgenerated()) @map("_id") @db.ObjectId
    name        String
    legalName   String
    cvr         String             @unique
    phoneNumber String
    address     Address            @relation(fields: [addressId], references: [id])
    addressId   String             @db.ObjectId
    owner       User               @relation(fields: [ownerId], references: [id])
    ownerId     String             @db.ObjectId
    deleted     Boolean            @default(false)
    orders      Order[]
    ratings     SellerRating[]
    products    SellerToProducts[]
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

model SellerToProducts {
    id            String         @id @default(dbgenerated()) @map("_id") @db.ObjectId
    seller        Seller         @relation(fields: [sellerId], references: [id])
    sellerId      String         @db.ObjectId
    product       Product        @relation(fields: [productId], references: [id])
    productId     String         @db.ObjectId
    originalPrice Int
    salePrice     Int?
    stockQty      Int
    deleted       Boolean        @default(false)
    orderItems    OrderItem[]
    priceHistory  PriceHistory[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Order {
    id        String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
    user      User        @relation(fields: [userId], references: [id])
    userId    String      @db.ObjectId
    seller    Seller      @relation(fields: [sellerId], references: [id])
    sellerId  String      @db.ObjectId
    status    String      @default("Pending")
    items     OrderItem[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model OrderItem {
    id              String           @id @default(dbgenerated()) @map("_id") @db.ObjectId
    order           Order            @relation(fields: [orderId], references: [id])
    orderId         String           @db.ObjectId
    sellerProduct   SellerToProducts @relation(fields: [sellerProductId], references: [id])
    sellerProductId String           @db.ObjectId
    quantity        Int
    pricePaid       Int
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}

// enum OrderStatus {
//     Pending
//     Confirmed
//     Sent
//     Delivered
//     Cancelled
// }

model Manufacturer {
    id        String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
    name      String
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model ProductDescription {
    id          String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
    description String
    products    Product[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Property {
    id        String                  @id @default(dbgenerated()) @map("_id") @db.ObjectId
    name      String
    type      String
    products  ProductsToProperties[]
    createdAt DateTime               @default(now())
    updatedAt DateTime               @updatedAt
}

//enum PropertyType {
//    Boolean
//    Number
//    String
//}

model Category {
    id            String     @id @default(dbgenerated()) @map("_id") @db.ObjectId
    parent        Category?  @relation("Subcategories", fields: [parentId], references: [id])
    parentId      String?    @db.ObjectId
    subCategories Category[] @relation("Subcategories")
    name          String
    deleted       Boolean    @default(false)
    products      Product[]
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

model Product {
    id             String                 @id @default(dbgenerated()) @map("_id") @db.ObjectId
    name           String
    code           String                 @unique
    manufacturer   Manufacturer           @relation(fields: [manufacturerId], references: [id])
    manufacturerId String                 @db.ObjectId
    description    ProductDescription?    @relation(fields: [descriptionId], references: [id])
    descriptionId  String?                @db.ObjectId
    properties     ProductsToProperties[]
    category       Category               @relation(fields: [categoryId], references: [id])
    categoryId     String                 @db.ObjectId
    approved       Boolean                @default(false)
    deleted        Boolean                @default(false)
    groups         ProductGroup[]
    images         ProductImage[]
    ratings        ProductRating[]
    sellers        SellerToProducts[]
    createdAt      DateTime               @default(now())
    updatedAt      DateTime               @updatedAt
}

model ProductsToProperties {
    id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
    product    Product  @relation(fields: [productId], references: [id])
    productId  String   @db.ObjectId
    property   Property @relation(fields: [propertyId], references: [id])
    propertyId String   @db.ObjectId
    value      String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model ProductGroup {
    id        String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
    name      String?
    products  Product[]
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model ProductImage {
    id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
    url       String
    product   Product  @relation(fields: [productId], references: [id])
    productId String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ProductRating {
    id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
    product   Product  @relation(fields: [productId], references: [id])
    productId String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    rating    Int
    review    String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SellerRating {
    id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
    seller    Seller   @relation(fields: [sellerId], references: [id])
    sellerId  String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    rating    Int
    review    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PriceHistory {
    id              String           @id @default(dbgenerated()) @map("_id") @db.ObjectId
    sellerProduct   SellerToProducts @relation(fields: [sellerProductId], references: [id])
    sellerProductId String           @db.ObjectId
    oldPrice        Int?
    newPrice        Int?
    oldSalePrice    Int?
    newSalePrice    Int?
    createdAt       DateTime         @default(now())
    updatedAt       DateTime         @updatedAt
}
